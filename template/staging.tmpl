{{ define "formation" }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      {{ template "process-conditions" . }}
      "BlankCluster": { "Fn::Equals": [ { "Ref": "Cluster" }, "" ] }
    },
    "Parameters" : {
      {{ template "balancer-params" . }}
      {{ template "process-params" . }}

      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Cpu": {
        "Type": "Number",
        "Default": "200",
        "Description": "CPU shares of each process"
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "Version": {
        "Default": "latest",
        "Description": "Convox release version",
        "Type": "String"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      }
    },
    "Resources": {
      "CustomTopicRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                "Action": [ "sts:AssumeRole" ]
              }
            ]
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyName": "Administrator",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
              }
            }
          ]
        }
      },
      "CustomTopic": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Code": {
            "S3Bucket": { "Fn::Join": [ "-", [ "convox", { "Ref": "AWS::Region" } ] ] },
            "S3Key": { "Fn::Join": [ "", [ "release/", { "Ref": "Version" }, "/formation.zip" ] ] }
          },
          "Handler": "lambda.external",
          "MemorySize": "128",
          "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
          "Runtime": "nodejs",
          "Timeout": "30"
        }
      },
      {{ template "balancer-resources" . }}
      {{ template "process-resources" . }}
      {{ template "process-services" . }}

      {{ template "security" }}
      {{ template "state" }}
    },
    "Outputs": {
      {{ template "balancer-outputs" . }}
      {{ template "process-outputs" . }}

      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }
{{ end }}

{{ define "process-conditions" }}
  {{ range $k := .EntryNames }}
    "Blank{{ upper $k }}Service": { "Fn::Equals": [ { "Ref": "{{ upper $k }}Service" }, "" ] },
  {{ end }}
{{ end }}

{{ define "process-params" }}
  {{ range $k, $e := . }}
    "{{ upper $k }}Command": {
      "Type" : "String",
      "Default" : "{{ command $e.Command }}",
      "Description" : ""
    },
    "{{ upper $k }}DesiredCount": {
      "Type" : "Number",
      "Default" : "1",
      "Description" : "The number of instantiations of the process to place and keep running on your cluster"
    },
    "{{ upper $k }}Image": {
      "Type" : "String",
      "Default" : "",
      "Description" : ""
    },
    "{{ upper $k }}Memory": {
      "Type": "Number",
      "Default": "256",
      "Description": "MB of RAM to reserve"
    },
    "{{ upper $k }}Service": {
      "Type" : "String",
      "Default" : "",
      "Description" : ""
    },
  {{ end }}
{{ end }}

{{ define "process-outputs" }}
  "Kinesis": {
    "Value": { "Ref": "Kinesis" }
  },
{{ end }}

{{ define "process-resources" }}
  "Kinesis": {
    "Type": "AWS::Kinesis::Stream",
    "Properties": {
      "ShardCount": 1
    }
  },
  {{ if .HasProcesses }}
    "LogsUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "LogsRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "kinesis:PutRecords" ],
                  "Resource": [ { "Fn::Join": [ "", [ "arn:aws:kinesis:*:*:stream/", { "Ref": "AWS::StackName" }, "-*" ] ] } ]
                }
              ]
            }
          }
        ]
      }
    },
    "LogsAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "LogsUser" }
      }
    },
  {{ end }}
{{ end }}

{{ define "process-services" }}
  {{ if .HasProcesses }}
    {{ range $k, $e := . }}
      "{{ upper $k }}ECSTaskDefinition": {
        "DependsOn": ["CustomTopic", "ServiceRole"],
        "Type": "Custom::ECSTaskDefinition",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $k }}" ] ] },
          "Release": { "Ref": "Release" },
          "Environment": { "Ref": "Environment" },
          "Key": { "Ref": "Key" },
          "Tasks": [ {{ entry_task . $k }} ]
        }
      },
      "{{ upper $k }}ECSService": {
        "DependsOn": "CustomTopic",
        "Type": "Custom::ECSService",
        "Version": "1.0",
        "Properties": {
          "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
          "Cluster": { "Ref": "Cluster" },
          "DesiredCount": { "Ref": "{{ upper $k }}DesiredCount" },
          "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "{{ $k }}" ] ] },
          "TaskDefinition": { "Ref": "{{ upper $k }}ECSTaskDefinition" },
          "Role": { "Ref": "ServiceRole" },
          "LoadBalancers": [ {{ entry_loadbalancers . $k }} ]
        }
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-params" }}
  {{ range $ps, $entry := . }}
    {{ range $i, $port := $entry.Ports }}
      {{ if (contains $port ":") }}
      {{ $parts := (split $port ":") }}
      "{{ upper $ps }}Port{{ index $parts 0 }}Container": {
        "Type": "String",
        "Default": "{{ index $parts 1 }}",
        "Description": "Exposed port from within container"
      },
      "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
        "Type" : "String",
        "Default" : "{{ index $parts 0 }}",
        "Description" : "Externally bound port number"
      },
      "{{ upper $ps }}Port{{ index $parts 0 }}Host": {
        "Type" : "String",
        "Default" : "{{ index $entry.Randoms $i }}",
        "Description" : "Container host mapped port"
      },
      {{ else }}
      "{{ upper $ps }}Port{{ $port }}Container": {
        "Type": "String",
        "Default": "{{ $port }}",
        "Description": "Exposed port from within container"
      },
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-outputs" }}
  {{ if .HasExternalPorts }}
    "BalancerHost": {
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    {{ range $ps, $entry := . }}
      {{ if $entry.HasPorts }}
        {{ range $entry.Ports }}
          {{ $parts := (split . ":") }}
          "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
            "Value": { "Ref": "{{ upper $ps }}Port{{ index $parts 0 }}Balancer" }
          },
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-resources" }}
  {{ if .HasExternalPorts }}
    "BalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
        "SecurityGroupIngress": [ {{ ingress . }} ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Balancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": { "Ref": "Subnets" },
        "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
        "ConnectionSettings": { "IdleTimeout": 60 },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": {{ .FirstCheck }},
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "Listeners": [ {{ listeners . }} ],
        "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
        "LoadBalancerName": { "Ref": "AWS::StackName" },
        "SecurityGroups": [ { "Ref": "BalancerSecurityGroup" } ]
      }
    },
  {{ end }}
{{ end }}

{{ define "security" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },
{{ end }}

{{ define "state" }}
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  }
{{ end }}
